# Generated by Django 4.0.4 on 2022-05-10 14:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FightListPojam',
            fields=[
                ('idp', models.AutoField(db_column='idP', primary_key=True, serialize=False)),
                ('tekst', models.CharField(max_length=100)),
                ('poeni', models.IntegerField()),
            ],
            options={
                'db_table': 'fight_list_pojam',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FightListTema',
            fields=[
                ('idt', models.AutoField(db_column='idT', primary_key=True, serialize=False)),
                ('tema', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'fight_list_tema',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='KzzOdgovor',
            fields=[
                ('ido', models.AutoField(db_column='idO', primary_key=True, serialize=False)),
                ('tekst', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'kzz_odgovor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='KzzPitanje',
            fields=[
                ('idp', models.AutoField(db_column='idP', primary_key=True, serialize=False)),
                ('tekst', models.CharField(max_length=300)),
            ],
            options={
                'db_table': 'kzz_pitanje',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rezultat',
            fields=[
                ('idm', models.AutoField(db_column='idM', primary_key=True, serialize=False)),
                ('fightlistrezultat', models.IntegerField(blank=True, db_column='fightListRezultat', null=True)),
                ('mozgicrezultat', models.IntegerField(blank=True, db_column='mozgicRezultat', null=True)),
                ('kzzrezultat', models.IntegerField(blank=True, db_column='kzzRezultat', null=True)),
                ('rezultat', models.IntegerField(blank=True, null=True)),
                ('vremeigranja', models.DateTimeField(blank=True, db_column='vremeIgranja', null=True)),
            ],
            options={
                'db_table': 'rezultat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Korisnik',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('opis', models.CharField(blank=True, max_length=200, null=True)),
                ('titula', models.CharField(blank=True, max_length=45, null=True)),
                ('slika', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'korisnik',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Statistika',
            fields=[
                ('idk', models.OneToOneField(db_column='idK', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('highscore', models.IntegerField(blank=True, db_column='highScore', null=True)),
                ('totalscore', models.IntegerField(blank=True, db_column='totalScore', null=True)),
                ('prosekfightlist', models.FloatField(blank=True, db_column='prosekFightList', null=True)),
                ('prosekmozgic', models.FloatField(blank=True, db_column='prosekMozgic', null=True)),
                ('prosekkzz', models.FloatField(blank=True, db_column='prosekKZZ', null=True)),
                ('brodigranih', models.IntegerField(blank=True, db_column='brOdigranih', null=True)),
                ('prosek', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'statistika',
                'managed': False,
            },
        ),
    ]
